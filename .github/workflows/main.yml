name: 'Terraform AKS Deployment'

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: 'Initialize Terraform'
        run: terraform init

      - name: 'Validate Terraform'
        run: terraform validate

      - name: 'Plan Terraform'
        id: plan
        run: terraform plan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        run: terraform output

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/aks-set-context@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}
          kubectl get nodes
          
      - name: Install Helm
        id: install-helm
        uses: azure/setup-helm@v4
        # with:
        #   version: 'v3.7.0'  # Specify the Helm version if needed
      - name: Install Helm
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx || true
          # Install the Nginx Ingress controller with specified configurations
          helm install nginx-ingress ingress-nginx/ingress-nginx \
            --set controller.replicaCount=2 \
            --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux || true

            
          kubectl get namespace
      - name: Verify NGINX Ingress Controller Installation
        run: |
          echo "Waiting for Ingress to be ready..."
          sleep 90 # Wait for 1.5 minutes
          kubectl get pods -n default  # Check if Ingress Controller pods are running
          kubectl get svc -n default   # Check Ingress Controller services

      - name: Install cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update

          CERT_MANAGER_TAG=v1.14.3
          helm install cert-manager jetstack/cert-manager \
            --namespace default --version $CERT_MANAGER_TAG \
            --set installCRDs=true \
            --set nodeSelector."kubernetes\.io/os"=linux || true

          kubectl label namespace default cert-manager.io/disable-validation=true

      - name: Apply cert-manager resources
        run: |
          kubectl apply -f cert-manager.yml

      - name: Install Argo CD
        run: |
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          
      - name: Apply Ingress Resources
        run: |
          kubectl apply -f ingress.yml 

      - name: Apply Application
        run: |
          kubectl apply -f deploy-ingress.yml
          
      - name: Retrieve Argo CD Initial Admin Password
        run: |
          echo "Argo CD Initial Admin Password:"
          sleep 60 # Wait for 1 minutes
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
          echo "Ingress IP Address:"
          kubectl get svc -l app.kubernetes.io/name=ingress-nginx -n default -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}"      
          
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
